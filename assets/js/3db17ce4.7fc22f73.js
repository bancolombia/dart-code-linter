"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[2586],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o="avoid-collection-methods-with-unrelated-types",l={unversionedId:"rules/dart/avoid-collection-methods-with-unrelated-types",id:"rules/dart/avoid-collection-methods-with-unrelated-types",title:"avoid-collection-methods-with-unrelated-types",description:"added in: 1.6.0 warning.",source:"@site/docs/rules/dart/avoid-collection-methods-with-unrelated-types.mdx",sourceDirName:"rules/dart",slug:"/rules/dart/avoid-collection-methods-with-unrelated-types",permalink:"/docs/rules/dart/avoid-collection-methods-with-unrelated-types",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/rules/dart/avoid-collection-methods-with-unrelated-types.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"avoid-cascade-after-if-null",permalink:"/docs/rules/dart/avoid-cascade-after-if-null"},next:{title:"avoid-double-slash-imports",permalink:"/docs/rules/dart/avoid-double-slash-imports"}},s={},c=[],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"avoid-collection-methods-with-unrelated-types"},"avoid-collection-methods-with-unrelated-types"),(0,a.kt)("p",null,"added in: 1.6.0 ",(0,a.kt)("span",{style:{color:"orange"}},"warning"),"."),(0,a.kt)("p",null,"Avoid using collection methods with unrelated types, such as accessing a map of integers using a string key."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This lint has been requested for a long time: Follow ",(0,a.kt)("u",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/linter/issues/1307"},"this link"))," this link to see the details.\nRelated: Dart's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"list_remove_unrelated_type")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"iterable_contains_unrelated_type"),". :::"),(0,a.kt)("p",{parentName:"admonition"},"Use strict configuration (default is true), if you want dynamic or Object type keys to not trigger the warning."),(0,a.kt)("h2",{parentName:"admonition",id:"config-example"},"Config example"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart:"},"dart_code_linter:\n  ...\n  rules:\n    ...\n    - avoid-collection-methods-with-unrelated-types:\n        strict: false\n")),(0,a.kt)("h2",{parentName:"admonition",id:"example"},"Example"),(0,a.kt)("h3",{parentName:"admonition",id:"bad"},"Bad:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},'final map = Map<int, String>();\nmap["str"] = "value"; // LINT\nvar a = map["str"]; // LINT\nmap.containsKey("str"); // LINT\nmap.containsValue(42); // LINT\nmap.remove("str"); // LINT\n\nIterable<int>.empty().contains("str"); // LINT\n\nList<int>().remove("str"); // LINT\n\nfinal set = {10, 20, 30};\nset.contains("str"); // LINT\nset.containsAll(Iterable<String>.empty()); // LINT\nset.difference(<String>{}); // LINT\nprimitiveSet.intersection(<String>{}); // LINT\nset.lookup("str"); // LINT\nprimitiveList.remove("str"); // LINT\nset.removeAll(Iterable<String>.empty()); // LINT\nset.retainAll(Iterable<String>.empty()); // LINT\n')),(0,a.kt)("h3",{parentName:"admonition",id:"good"},"Good:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},'final map = Map<int, String>();\nmap[42] = "value";\nvar a = map[42];\nmap.containsKey(42);\nmap.containsValue("value");\nmap.remove(42);\n\nIterable<int>.empty().contains(42);\n\nList<int>().remove(42);\n\nfinal set = {10, 20, 30};\nset.contains(42);\nset.containsAll(Iterable<int>.empty());\nset.difference(<int>{});\nprimitiveSet.intersection(<int>{});\nset.lookup(42);\nprimitiveList.remove(42);\nset.removeAll(Iterable<int>.empty());\nset.retainAll(Iterable<int>.empty());\n'))))}m.isMDXComponent=!0}}]);