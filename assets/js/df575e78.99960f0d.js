"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[5869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(i,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},s="use-setstate-synchronously",l={unversionedId:"rules/flutter/use-setstate-synchronously",id:"rules/flutter/use-setstate-synchronously",title:"use-setstate-synchronously",description:"added in: 1.6.0 warning",source:"@site/docs/rules/flutter/use-setstate-synchronously.mdx",sourceDirName:"rules/flutter",slug:"/rules/flutter/use-setstate-synchronously",permalink:"/docs/rules/flutter/use-setstate-synchronously",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/rules/flutter/use-setstate-synchronously.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"prefer-using-list-view",permalink:"/docs/rules/flutter/prefer-using-list-view"},next:{title:"Flame",permalink:"/docs/rules/flame/"}},i={},u=[{value:"Config",id:"config",level:2},{value:"Example",id:"example",level:2},{value:"Bad:",id:"bad",level:3},{value:"Good:",id:"good",level:3},{value:"Good:",id:"good-1",level:3}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-setstate-synchronously"},"use-setstate-synchronously"),(0,a.kt)("p",null,"added in: 1.6.0 ",(0,a.kt)("span",{style:{color:"orange"}},"warning")),(0,a.kt)("p",null,"Warns when ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},"setState"))," is called past an ",(0,a.kt)("i",null,"await point")," (also known as asynchronous gap) within a subclass of State."),(0,a.kt)("p",null,"In async functions, the state of a widget may have been disposed between await points, e.g. because the user moved to another screen, leading to errors calling ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},"setState")),". After each await point, i.e. when a Future is awaited, the possibility that the widget has been unmounted needs to be checked before calling ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},"setState")),"."),(0,a.kt)("p",null,"Consider storing Futures directly in your state and use ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html"},"FutureBuilder"))," to unwrap them."),(0,a.kt)("p",null,"If this is not possible, you can also check for ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/mounted.html"},"mounted"))," to only update state when the widget is still mounted. However, an effective fix usually does not make use of ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/mounted.html"},"mounted")),", but rather revolves around refactoring your states."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The following patterns are recognized when statically determining mountedness:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"if (mounted)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"if (mounted && ..)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"if (!mounted || ..)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"try")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"switch")," mountedness per branch"),(0,a.kt)("li",{parentName:"ul"},"Divergence in ",(0,a.kt)("inlineCode",{parentName:"li"},"for"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"while")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"switch")," statements using ",(0,a.kt)("inlineCode",{parentName:"li"},"break")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"continue"),"\nIf a ",(0,a.kt)("inlineCode",{parentName:"li"},"!mounted")," check diverges, i.e. ends in a ",(0,a.kt)("inlineCode",{parentName:"li"},"return")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"throw"),", the outer scope is considered mounted and vice versa:")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"if (!mounted) return;\n// Should be mounted right now\nsetState(() { ... });\n\n// After this statement, need to check 'mounted' again\nawait fetch(...);\n\n// In control flow statements, 'break' and 'continue' diverges\nwhile (...) {\n  if (!mounted) break;\n  // Should be mounted right now\n  setState(() { ... });\n}\n"))),(0,a.kt)("p",null,"Additional resources:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/49340116/setstate-called-after-dispose"},"https://stackoverflow.com/questions/49340116/setstate-called-after-dispose")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"[use_build_context_synchronously](https://dart-lang.github.io/linter/lints/use_build_context_synchronously.html)"),", a lint that checks for async usages of `BuildContext`")),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("p",null,"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"methods")," (default is ",(0,a.kt)("code",null,(0,a.kt)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/State/setState.html"},"setState")),") to configure the list of methods to check for unchecked async calls."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_linter:\n  ...\n  rules:\n    ...\n    - use-setstate-synchronously:\n        methods:\n          - setState\n          - yourMethod\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"bad"},"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class _MyWidgetState extends State<MyWidget> {\n  String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () async {\n        String fromServer = await fetch(...);\n        // LINT\n        setState(() {\n          message = fromServer;\n        });\n      },\n      child: Text(message),\n    );\n  }\n}\n")),(0,a.kt)("h3",{id:"good"},"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class _MyWidgetState extends State<MyWidget> {\n  String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () async {\n        String fromServer = await fetch(...);\n        if (mounted) {\n          setState(() {\n            message = fromServer;\n          });\n        }\n      },\n      child: Text(message),\n    );\n  }\n}\n")),(0,a.kt)("h3",{id:"good-1"},"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},'class _MyWidgetState extends State<MyWidget> {\n  Future<String> message;\n\n  @override\n  Widget build(BuildContext context) {\n    return Button(\n      onPressed: () {\n        setState(() {\n          message = fetch(...);\n        });\n      },\n      child: FutureBuilder<String>(\n        future: message,\n        builder: (context, snapshot) {\n          return Text(snapshot.data ?? "...");\n        },\n      ),\n    );\n  }\n}\n')))}p.isMDXComponent=!0}}]);