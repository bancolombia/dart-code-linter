"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[3429],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5718:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o="prefer-iterable-of",l={unversionedId:"rules/dart/prefer-iterable-of",id:"rules/dart/prefer-iterable-of",title:"prefer-iterable-of",description:"added in: 1.6.0 warning",source:"@site/docs/rules/dart/prefer-iterable-of.mdx",sourceDirName:"rules/dart",slug:"/rules/dart/prefer-iterable-of",permalink:"/docs/rules/dart/prefer-iterable-of",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/rules/dart/prefer-iterable-of.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"prefer-immediate-return",permalink:"/docs/rules/dart/prefer-immediate-return"},next:{title:"prefer-last",permalink:"/docs/rules/dart/prefer-last"}},s={},p=[{value:"Example",id:"example",level:2},{value:"Bad:",id:"bad",level:3},{value:"Good:",id:"good",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prefer-iterable-of"},"prefer-iterable-of"),(0,a.kt)("p",null,"added in: 1.6.0 ",(0,a.kt)("span",{style:{color:"orange"}},"warning")),(0,a.kt)("p",null,"Warns when ",(0,a.kt)("inlineCode",{parentName:"p"},"List.from()")," factory is used instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"List.of()"),"."),(0,a.kt)("p",null,"The difference between ",(0,a.kt)("inlineCode",{parentName:"p"},"List.of()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"List.from()")," is that ",(0,a.kt)("inlineCode",{parentName:"p"},".of()")," takes an argument of the same type as what it returns and enforces it at compilation time, and that ",(0,a.kt)("inlineCode",{parentName:"p"},".from()")," allows potentially unsafe downcasting and enforces convertibility at runtime."),(0,a.kt)("p",null,"Additional resources:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/dart-lang/linter/issues/2555"},"https://github.com/dart-lang/linter/issues/2555")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/dart-lang/linter/issues/2066"},"https://github.com/dart-lang/linter/issues/2066"))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"bad"},"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"...\nvar intList = [1, 2, 3];\n\nvar copy = List<int>.from(intList); // LINT\nvar numList = List<num>.from(intList); // LINT\n\nvar unspecifiedList = List.from(intList); // LINT\n\nfinal recordsSet = <(num,)>{(1,), (2,), (3,)};\nfinal recordSet = Set<(num,)>.from(recordsSet); // LINT\nfinal extra = Set<(int, String)>.from(recordsSet); // LINT\n")),(0,a.kt)("h3",{id:"good"},"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"var intList = [1, 2, 3];\n\nvar copy = List<int>.of(intList);\nvar numList = List<num>.of(intList);\n...\n\nvar numList = <num>[1, 2, 3];\n\nvar intList = List<int>.from(numList);\n\nfinal recordsSet = <(num,)>{(1,), (2,), (3,)};\nfinal record = Set<(int,)>.from(recordsSet);\n")))}d.isMDXComponent=!0}}]);