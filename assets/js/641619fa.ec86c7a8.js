"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[191],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(n),u=i,f=p["".concat(s,".").concat(u)]||p[u]||d[u]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(7462),i=(n(7294),n(3905));const a={},o="Maximum Nesting Level",l={unversionedId:"metrics/maximum-nesting-level",id:"metrics/maximum-nesting-level",title:"Maximum Nesting Level",description:"Maximum Nesting Level this is the maximum level of nesting blocks / control structures that are present in a method (or function). Code with deep nesting level are often complex and tough to maintain.",source:"@site/docs/metrics/maximum-nesting-level.md",sourceDirName:"metrics",slug:"/metrics/maximum-nesting-level",permalink:"/docs/metrics/maximum-nesting-level",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/metrics/maximum-nesting-level.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Maintainability Index",permalink:"/docs/metrics/maintainability-index"},next:{title:"Number of Methods",permalink:"/docs/metrics/number-of-methods"}},s={},m=[{value:"Config example",id:"config-example",level:2},{value:"Example",id:"example",level:2}],c={toc:m},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"maximum-nesting-level"},"Maximum Nesting Level"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Maximum Nesting Level")," this is the maximum level of nesting blocks / control structures that are present in a method (or ",(0,i.kt)("i",null,"function"),"). Code with deep nesting level are often complex and tough to maintain."),(0,i.kt)("p",null,"Generally the blocks with ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"else if"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"switch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"catch"),", etc statements are the part of nested loops."),(0,i.kt)("h2",{id:"config-example"},"Config example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_linter:\n  ...\n  metrics:\n    ...\n    maximum-nesting-level: 5\n    ...\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"void visitBlock(Block node) {\n  final nestingNodesChain = <AstNode>[];\n\n  AstNode astNode = node;\n  do {\n    if (astNode is Block &&\n        (astNode?.parent is! BlockFunctionBody ||\n            astNode?.parent?.parent is FunctionExpression ||\n            astNode?.parent?.parent is ConstructorDeclaration)) {\n      nestingNodesChain.add(astNode);\n    }\n\n    astNode = astNode.parent;\n  } while (astNode.parent != _functionNode);\n\n  if (nestingNodesChain.length > _deepestNestingNodesChain.length) {\n    _deepestNestingNodesChain = nestingNodesChain;\n  }\n\n  super.visitBlock(node);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Maximum Nesting Level")," for the example function is ",(0,i.kt)("strong",{parentName:"p"},"3"),"."))}d.isMDXComponent=!0}}]);