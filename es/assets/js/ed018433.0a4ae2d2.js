"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[6028],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6095:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={},l="prefer-static-class",o={unversionedId:"rules/dart/prefer-static-class",id:"rules/dart/prefer-static-class",title:"prefer-static-class",description:"added in: 1.6.0 style",source:"@site/docs/rules/dart/prefer-static-class.mdx",sourceDirName:"rules/dart",slug:"/rules/dart/prefer-static-class",permalink:"/es/docs/rules/dart/prefer-static-class",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/rules/dart/prefer-static-class.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"prefer-moving-to-variable",permalink:"/es/docs/rules/dart/prefer-moving-to-variable"},next:{title:"prefer-trailing-comma",permalink:"/es/docs/rules/dart/prefer-trailing-comma"}},s={},c=[{value:"Config",id:"config",level:2},{value:"Example",id:"example",level:2},{value:"Bad:",id:"bad",level:3},{value:"Good:",id:"good",level:3}],p={toc:c},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prefer-static-class"},"prefer-static-class"),(0,a.kt)("p",null,"added in: 1.6.0 ",(0,a.kt)("span",{style:{color:"green"}},"style")),(0,a.kt)("p",null,"Suggests to use static class member instead of global constants, variables and functions."),(0,a.kt)("p",null,"Pros:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Easy to search:")," great help from IDE autocomplete. Type class/file name to find domain, and type dot to list all members."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Easy to import:")," name conflicts will happen less often since all names are scoped to file name/class name. No need to use ",(0,a.kt)("inlineCode",{parentName:"li"},"import 'file.dart' as 'file'")," to resolve name conflicts."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Easy to read:")," declarations in code will be always shown paired with domain they belong to. Compare ",(0,a.kt)("inlineCode",{parentName:"li"},"Circle.getArea")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"getArea")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"getCircleArea"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"member-ordering"},"member-ordering")," rule will be applied to class members.")),(0,a.kt)("p",null,"Cons:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The code amount slightly increases.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"When fixing rule issues and moving global members into a class, consider also renaming to avoid duplicating context. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"getCircleArea")," global function should become ",(0,a.kt)("inlineCode",{parentName:"p"},"Circle.getArea"),", not ",(0,a.kt)("inlineCode",{parentName:"p"},"Circle.getCircleArea"),".")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"For this rule it's recommended to exclude the test folder.")),(0,a.kt)("h2",{id:"config"},"Config"),(0,a.kt)("p",null,"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"ignore-private")," (default is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),") to ignore private global declarations."),(0,a.kt)("p",null,"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"ignore-names")," (default is ",(0,a.kt)("inlineCode",{parentName:"p"},"none"),") to ignore names matching regular expressions (for example, Riverpod providers, flutter hooks, etc)."),(0,a.kt)("p",null,"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"ignore-annotations")," (default is ","[",(0,a.kt)("inlineCode",{parentName:"p"},"FunctionalWidget"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"swidget"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hwidget"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hcwidget"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"riverpod"),"]",") to override default ignored annotation list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_linter:\n  ...\n  rules:\n    ...\n    - prefer-static-class\n        ignore-annotations:\n          - allowedAnnotation\n        ignore-private: true\n        ignore-names:\n          - (.*)Provider\n          - use(.*)\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"bad"},"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"// circle.dart\nint getCircleArea() {} // LINT\nint getPerimeter() // LINT\n\nconst _PI = 3.14; // LINT\n")),(0,a.kt)("h3",{id:"good"},"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"// circle.dart\nclass Circle {\n    static int getArea() {}\n    static int getPerimeter() {}\n\n    static const _PI = 3.14;\n}\n")))}m.isMDXComponent=!0}}]);