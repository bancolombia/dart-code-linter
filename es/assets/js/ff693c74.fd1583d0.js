"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[2751],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),p=r,f=c["".concat(o,".").concat(p)]||c[p]||m[p]||i;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2528:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const i={},l="avoid-unrelated-type-assertions",s={unversionedId:"rules/dart/avoid-unrelated-type-assertions",id:"rules/dart/avoid-unrelated-type-assertions",title:"avoid-unrelated-type-assertions",description:"added in: 1.6.0 warning",source:"@site/docs/rules/dart/avoid-unrelated-type-assertions.mdx",sourceDirName:"rules/dart",slug:"/rules/dart/avoid-unrelated-type-assertions",permalink:"/es/docs/rules/dart/avoid-unrelated-type-assertions",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/rules/dart/avoid-unrelated-type-assertions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"avoid-unnecessary-type-casts",permalink:"/es/docs/rules/dart/avoid-unnecessary-type-casts"},next:{title:"avoid-unused-parameters",permalink:"/es/docs/rules/dart/avoid-unused-parameters"}},o={},d=[{value:"Config",id:"config",level:2},{value:"Example",id:"example",level:2},{value:"Bad:",id:"bad",level:3},{value:"Good:",id:"good",level:3}],u={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"avoid-unrelated-type-assertions"},"avoid-unrelated-type-assertions"),(0,r.kt)("p",null,"added in: 1.6.0 ",(0,r.kt)("span",{style:{color:"orange"}},"warning")),(0,r.kt)("p",null,"Warns about unrelated usages of ",(0,r.kt)("inlineCode",{parentName:"p"},"is")," operator."),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("p",null,"Set ",(0,r.kt)("inlineCode",{parentName:"p"},"ignore-mixins")," (default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),") to exclude mixins from the rule checks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_linter:\n  ...\n  rules:\n    - avoid-unrelated-type-assertions:\n        ignore-mixins: false\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("h3",{id:"bad"},"Bad:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class Animal {}\n\nclass NotAnimal {}\n\nclass HomeAnimal extends Animal {}\n\nclass Example {\n  final regularString = '';\n  final myList = <int>[1, 2, 3];\n\n  final Animal animal = Animal();\n\n  void main() {\n    final result = regularString is int; // LINT\n    final result2 = myList is List<String>; // LINT\n\n    final result3 = animal is NotAnimal; // LINT\n  }\n\n  void patterns() {\n    final animal = Animal();\n\n    if (animal case HomeAnimal result) {}\n    if (animal case HomeAnimal()) {}\n    if (animal case NotAnimal result) {} // LINT\n    if (animal case NotAnimal()) {} // LINT\n  }\n}\n")),(0,r.kt)("h3",{id:"good"},"Good:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class Animal {}\n\nclass HomeAnimal extends Animal {}\n\nclass Example {\n  final regularString = '';\n  final myList = <int>[1, 2, 3];\n\n  final Animal animal = Animal();\n\n  void main() {\n    final result = regularString is String;\n    final result2 = myList is List<int>;\n\n    final result3 = animal is Object;\n  }\n\n  void patterns() {\n    final animal = Animal();\n\n    if (animal case HomeAnimal result) {}\n    if (animal case HomeAnimal()) {}\n  }\n}\n")))}m.isMDXComponent=!0}}]);