"use strict";(self.webpackChunkdart_code_linter=self.webpackChunkdart_code_linter||[]).push([[5525],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:3},i="Configuration",s={unversionedId:"configuration/configuration",id:"configuration/configuration",title:"Configuration",description:"DCL is designed to be flexible and configurable for your use case. You can turn off every rule and run only with enabled metrics calculation or have both rules and metrics enabled.",source:"@site/docs/configuration/configuration.md",sourceDirName:"configuration",slug:"/configuration/",permalink:"/es/docs/configuration/",draft:!1,editUrl:"https://github.com/bancolombia/dart-code-linter/tree/gh-pages-source/docs/configuration/configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/es/docs/core-concepts"},next:{title:"Configuring Metrics",permalink:"/es/docs/configuration/configuring-metrics"}},c={},l=[{value:"<em>This configuration is used by both CLI and the analysis server.</em>",id:"this-configuration-is-used-by-both-cli-and-the-analysis-server",level:3},{value:"<em>You can find a list of recommended rules here.</em>",id:"you-can-find-a-list-of-recommended-rules-here",level:3},{value:"<em>You can find a list of recommended metrics here.</em>",id:"you-can-find-a-list-of-recommended-metrics-here",level:3}],d={toc:l},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"DCL is designed to be flexible and configurable for your use case. You can turn off every rule and run only with enabled metrics calculation or have both rules and metrics enabled."),(0,o.kt)("p",null,"To configure DCL, add a dart_code_linter entry to ",(0,o.kt)("inlineCode",{parentName:"p"},"analysis_options.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-analysis_options.yaml"},"dart_code_linter:\ndart_code_metrics:\n  extends:\n    - ... # configures the list of preset configurations\n  metrics:\n    - ... # configures the list of reported metrics\n  metrics-exclude:\n    - ... # configures the list of files that should be ignored by metrics\n  rules:\n    - ... # configures the list of rules\n  rules-exclude:\n    - ... # configures the list of files that should be ignored by rules\n  anti-patterns:\n    - ... # configures the list of anti-patterns\n")),(0,o.kt)("h3",{id:"this-configuration-is-used-by-both-cli-and-the-analysis-server"},(0,o.kt)("em",{parentName:"h3"},"This configuration is used by both CLI and the analysis server.")),(0,o.kt)("p",null,"Basic config example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-analysis_options.yaml"},"dart_code_linter:\n  rules:\n    - avoid-dynamic\n    - avoid-passing-async-when-sync-expected\n    - avoid-redundant-async\n    - avoid-unnecessary-type-assertions\n    - avoid-unnecessary-type-casts\n    - avoid-unrelated-type-assertions\n    - avoid-unused-parameters\n    - avoid-nested-conditional-expressions\n    - newline-before-return\n    - no-boolean-literal-compare\n    - no-empty-block\n    - prefer-trailing-comma\n    - prefer-conditional-expressions\n    - no-equal-then-else\n    - prefer-moving-to-variable\n    - prefer-match-file-name\n    - avoid-collapsible-if\n    - avoid-redundant-else\n    - avoid-incomplete-copy-with\n    - avoid-self-compare\n    - avoid-self-assignment\n    - avoid-unnecessary-nullable-return-type\n    - avoid-unrelated-type-casts\n    - prefer-declaring-const-constructor\n")),(0,o.kt)("h3",{id:"you-can-find-a-list-of-recommended-rules-here"},(0,o.kt)("em",{parentName:"h3"},"You can find a list of recommended rules ",(0,o.kt)("a",{parentName:"em",href:"presets"},"here"),".")),(0,o.kt)("p",null,"Basic config with metrics:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-analysis_options.yaml"},"\ndart_code_linter:\n  metrics:\n    cyclomatic-complexity: 20\n    number-of-parameters: 4\n    maximum-nesting-level: 5\n  metrics-exclude:\n    - test/**\n  rules:\n    - avoid-dynamic\n    - avoid-passing-async-when-sync-expected\n    - avoid-redundant-async\n    - avoid-unnecessary-type-assertions\n    - avoid-unnecessary-type-casts\n    - avoid-unrelated-type-assertions\n    - avoid-unused-parameters\n    - avoid-nested-conditional-expressions\n    - newline-before-return\n    - no-boolean-literal-compare\n    - no-empty-block\n    - prefer-trailing-comma\n    - prefer-conditional-expressions\n    - no-equal-then-else\n    - prefer-moving-to-variable\n    - prefer-match-file-name\n    - avoid-collapsible-if\n    - avoid-redundant-else\n    - avoid-incomplete-copy-with\n    - avoid-self-compare\n    - avoid-self-assignment\n    - avoid-unnecessary-nullable-return-type\n    - avoid-unrelated-type-casts\n    - prefer-declaring-const-constructor\n")),(0,o.kt)("h3",{id:"you-can-find-a-list-of-recommended-metrics-here"},(0,o.kt)("em",{parentName:"h3"},"You can find a list of recommended metrics ",(0,o.kt)("a",{parentName:"em",href:"presets"},"here"),".")))}p.isMDXComponent=!0}}]);